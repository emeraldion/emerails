#!/usr/bin/env php
<?php
/**
 *                                   _ __
 *   ___  ____ ___  ___  _________ _(_) /____
 *  / _ \/ __ `__ \/ _ \/ ___/ __ `/ / / ___/
 * /  __/ / / / / /  __/ /  / /_/ / / (__  )
 * \___/_/ /_/ /_/\___/_/   \__,_/_/_/____/
 *
 * (c) Claudio Procida 2008-2024
 *
 * @format
 */

require_once __DIR__ . '/base.php';

use splitbrain\phpcli\Options;

use Emeraldion\EmeRails\Helpers\ANSIColorWriter;

class EmerailsGenerate extends ScriptCommand
{
    protected $name = 'EmeRails Generator Utility';
    protected $version = 'v1.1';

    const OPT_DRY_RUN = 'dry-run';
    const OPT_VERBOSE = 'verbose';
    const OPT_ACTIONS = 'actions';
    const OPT_FIELDS = 'fields';
    const OPT_ROOT_DIR = 'root-dir';

    const OPT_HAS_ONE = 'has-one';
    const OPT_HAS_MANY = 'has-many';
    const OPT_HAS_AND_BELONGS_TO_MANY = 'has-and-belongs-to-many';
    const OPT_BELONGS_TO = 'belongs-to';

    const COMMAND_CREATE = 'create';
    const COMMAND_MODEL = 'model';
    const COMMAND_CONTROLLER = 'controller';
    const COMMAND_RELATIONSHIP = 'relationship';
    const COMMAND_VIEW = 'view';

    const ARGUMENT_CONTROLLER = 'controller';
    const ARGUMENT_MODEL = 'model';
    const ARGUMENT_ACTION = 'action';

    protected function setup(Options $options)
    {
        $options->setHelp('EmeRails script to generate controllers, models and views');

        // General options
        $options->registerOption(self::OPT_VERBOSE, 'Print additional messages');
        $options->registerOption(self::OPT_DRY_RUN, 'Do not commit changes');

        // Create command
        $options->registerCommand(self::COMMAND_CREATE, 'Create an EmeRails app');
        $options->registerOption(self::OPT_ROOT_DIR, 'Root directory of the app', 'r', 'dir', 'create');

        // Controller command
        $options->registerCommand(self::COMMAND_CONTROLLER, 'Manage controllers');
        // Controller command options
        $options->registerArgument(self::ARGUMENT_CONTROLLER, 'Name of the controller', true, self::COMMAND_CONTROLLER);
        $options->registerOption(
            self::OPT_ACTIONS,
            'Action methods, comma separated',
            'a',
            'action1,action2,...',
            self::COMMAND_CONTROLLER
        );

        // Model command
        $options->registerCommand(self::COMMAND_MODEL, 'Manage models');
        // Model command options
        $options->registerArgument(self::ARGUMENT_MODEL, 'Name of the model', true, self::COMMAND_MODEL);
        $options->registerOption(
            self::OPT_FIELDS,
            'Fields of the model, with types',
            'f',
            'field1:type1,field2:type2,...',
            self::COMMAND_MODEL
        );

        // Relationship command
        $options->registerCommand(self::COMMAND_RELATIONSHIP, 'Manage relationships');
        // Relationship command options
        $options->registerArgument(
            self::ARGUMENT_MODEL,
            'Name of the first model in the relationship',
            true,
            self::COMMAND_RELATIONSHIP
        );
        $options->registerOption(
            self::OPT_BELONGS_TO,
            'Name of the parent model in a one-to-one relationship with the first',
            null,
            'parent-model',
            self::COMMAND_RELATIONSHIP
        );
        $options->registerOption(
            self::OPT_HAS_ONE,
            'Name of the child model in a one-to-one relationship with the first',
            null,
            'child-model',
            self::COMMAND_RELATIONSHIP
        );
        $options->registerOption(
            self::OPT_HAS_MANY,
            'Name of the child model in a one-to-many relationship with the first',
            null,
            'child-model',
            self::COMMAND_RELATIONSHIP
        );
        $options->registerOption(
            self::OPT_HAS_AND_BELONGS_TO_MANY,
            'Name of the peer model in a many-to-many relationship with the first',
            null,
            'peer-model',
            self::COMMAND_RELATIONSHIP
        );
        $options->registerOption(
            self::OPT_FIELDS,
            'Fields of the relationship, with types',
            'f',
            'field1:type1,field2:type2,...',
            self::COMMAND_RELATIONSHIP
        );

        // View command
        $options->registerCommand(self::COMMAND_VIEW, 'Manage views');
        // View command options
        $options->registerArgument(
            self::ARGUMENT_ACTION,
            'Name of the action reflecting this view',
            true,
            self::COMMAND_VIEW
        );
    }

    protected function main(Options $options)
    {
        $dry_run = $options->getOpt(self::OPT_DRY_RUN);
        $verbose = $options->getOpt(self::OPT_VERBOSE);

        // This path is relative to the Composer bin directory if available
        $basedir = sprintf('%s/../..', $GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin');

        switch ($options->getCmd()) {
            case self::COMMAND_CREATE:
                // This command can operate on a different root directory
                $basedir = $options->getOpt(self::OPT_ROOT_DIR) ?: $basedir;
                if (!file_exists($basedir)) {
                    mkdir($basedir, 0755, true);
                }

                print "\tcreating an EmeRails app at $basedir\n";

                $success =
                    // Copy the .htaccess file
                    copy(__DIR__ . '/../.htaccess.template', $basedir . '/.htaccess') &&
                    // Copy the router.php file
                    copy(__DIR__ . '/../router.template.php', $basedir . '/router.php') &&
                    // Make the assets directory
                    $this->create_dir($basedir . '/assets') &&
                    // Make the config directory
                    $this->create_dir($basedir . '/config') &&
                    // Copy db.conf.php file
                    copy(__DIR__ . '/../config/db.conf.template.php', $basedir . '/config/db.conf.php') &&
                    // Copy emerails.conf.php file
                    copy(__DIR__ . '/../config/emerails.conf.template.php', $basedir . '/config/emerails.conf.php') &&
                    // Make the controllers directory
                    $this->create_dir($basedir . '/controllers') &&
                    // Make the models directory
                    $this->create_dir($basedir . '/models') &&
                    // Make the helpers directory
                    $this->create_dir($basedir . '/helpers') &&
                    copy(
                        __DIR__ . '/../helpers/application_helper.template.php',
                        $basedir . '/helpers/application_helper.php'
                    ) &&
                    // Make the views directory
                    $this->create_dir($basedir . '/views') &&
                    // Make the views/layouts directory
                    $this->create_dir($basedir . '/views/layouts') &&
                    // default_layout.php
                    copy(
                        __DIR__ . '/../views/layouts/default_layout.template.php',
                        $basedir . '/views/layouts/default_layout.php'
                    );

                $this->create_or_update_controller($basedir, 'home');

                break;

            case self::COMMAND_CONTROLLER:
                // Ensure controllers directory exists
                $dir = sprintf('%s/controllers', $basedir);
                $this->create_dir($dir);

                // Name of the controller is an argument
                $controller = strtolower(first($options->getArgs()));
                // Optional actions from options
                $actions = explode(',', $options->getOpt(self::OPT_ACTIONS));
                // Create or update controller
                $this->create_or_update_controller($basedir, $controller, $actions);
                break;

            case self::COMMAND_MODEL:
                // Ensure models directory exists
                $dir = sprintf('%s/models', $basedir);
                $this->create_dir($dir);

                $model_class = joined_lower_to_camel_case(first($options->getArgs()));
                $model_table = class_name_to_table_name($model_class);
                $model = singularize($model_table);

                print "\tcreating models/$model.php\n";

                $model_code = <<<EOT
<?php
/**
 * @format
 */

use Emeraldion\EmeRails\Models\ActiveRecord;

/**
 * @class {$model_class}
 * @short Edit this model's short description
 * @details Edit this model's detailed description
 */
class {$model_class} extends ActiveRecord
{
    // TODO: add your code here
}
?>

EOT;

                file_put_contents(sprintf('%s/%s.php', $dir, $model), $model_code);

                $fields = array();
                if ($options->getOpt(self::OPT_FIELDS)) {
                    $fields_opt = explode(',', $options->getOpt(self::OPT_FIELDS));
                    for ($i = 0; $i < count($fields_opt); $i += 1) {
                        list($name, $type) = explode(':', $fields_opt[$i]);
                        $fields[$name] = $type;
                    }
                }

                $this->create_model($model_table, $fields);
                break;

            case self::COMMAND_RELATIONSHIP:
                $this->relationship($options);
                break;

            case self::COMMAND_VIEW:
                $this->view($options);
                break;

            default:
                $options->useCompactHelp();
                print $options->help();
        }
    }

    protected function relationship(Options $options)
    {
        $dry_run = $options->getOpt(self::OPT_DRY_RUN);
        $verbose = $options->getOpt(self::OPT_VERBOSE);

        $model_class = joined_lower_to_camel_case(strtolower(first($options->getArgs())));
        $model_table = class_name_to_table_name($model_class);
        $model = singularize($model_table);

        $relationship_signature = array_reduce(
            array(self::OPT_HAS_ONE, self::OPT_HAS_MANY, self::OPT_HAS_AND_BELONGS_TO_MANY, self::OPT_BELONGS_TO),
            function ($carry, $key) use ($options) {
                $o = $options->getOpt($key);
                if ($o) {
                    $carry[$key] = $o;
                }
                return $carry;
            },
            array()
        );

        if (count($relationship_signature) > 1) {
            throw new Exception(
                sprintf(
                    "Only one of --%s, --%s, --%s, and --%s can be used at once, but %s were provided.\n",
                    self::OPT_HAS_ONE,
                    self::OPT_HAS_MANY,
                    self::OPT_HAS_AND_BELONGS_TO_MANY,
                    self::OPT_BELONGS_TO,
                    implode(
                        ', ',
                        array_map(function ($key) {
                            return sprintf('--%s', $key);
                        }, array_keys($relationship_signature))
                    )
                )
            );
        }

        $conn = Db::get_connection();

        foreach ($relationship_signature as $cardinality => $other) {
            $other_model_class = joined_lower_to_camel_case(strtolower($other));
            $other_model_table = class_name_to_table_name($other_model_class);
            $other_model = singularize($other_model_table);

            switch ($cardinality) {
                case self::OPT_HAS_ONE:
                case self::OPT_HAS_MANY:
                    // Add a fk column to the other_model table
                    $model_fk_name = sprintf('%s_id', $model);
                    $conn->prepare(
                        <<<EOT
ALTER TABLE `{1}` ADD `{2}` int(11) NULL DEFAULT NULL AFTER `id`, ADD INDEX (`{2}`);
ALTER TABLE `{1}` ADD FOREIGN KEY (`{2}`) REFERENCES `{3}`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;
EOT
                        ,
                        $other_model_table,
                        $model_fk_name,
                        $model_table
                    );
                    $conn->exec_multiline();
                    break;
                case self::OPT_HAS_AND_BELONGS_TO_MANY:
                    // This is the only case where we have to create a new table
                    $model_fk_name = sprintf('%s_id', $model);
                    $other_model_fk_name = sprintf('%s_id', $other_model);

                    $table_names = array($model_table, $other_model_table);
                    sort($table_names);
                    $relationship_table_name = implode('_', $table_names);

                    $fields = array();
                    if ($options->getOpt(self::OPT_FIELDS)) {
                        $fields_opt = explode(',', $options->getOpt(self::OPT_FIELDS));
                        for ($i = 0; $i < count($fields_opt); $i += 1) {
                            list($name, $type) = explode(':', $fields_opt[$i]);
                            $fields[$name] = $type;
                        }
                    }

                    $this->create_relationship(
                        $relationship_table_name,
                        $model_table,
                        $model_fk_name,
                        $other_model_table,
                        $other_model_fk_name,
                        $fields
                    );

                    break;
                case self::OPT_BELONGS_TO:
                    // Add a fk column to the model table
                    $other_model_fk_name = sprintf('%s_id', $other_model);
                    $conn->prepare(
                        <<<EOT
ALTER TABLE `{1}` ADD `{2}` int(11) NULL DEFAULT NULL AFTER `id`, ADD INDEX (`{2}`);
ALTER TABLE `{1}` ADD FOREIGN KEY (`{2}`) REFERENCES `{3}`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;
EOT
                        ,
                        $model_table,
                        $other_model_fk_name,
                        $other_model_table
                    );
                    $conn->exec_multiline();
                    break;
            }
        }

        Db::close_connection($conn);
    }

    protected function view(Options $options)
    {
        $dry_run = $options->getOpt(self::OPT_DRY_RUN);
        $verbose = $options->getOpt(self::OPT_VERBOSE);

        // TODO:
    }

    protected function create_relationship(
        $relationship_table_name,
        $model_table,
        $model_fk_name,
        $other_model_table,
        $other_model_fk_name,
        $fields
    ) {
        $conn = Db::get_connection();

        $query = "SHOW TABLES LIKE '{$conn->escape($relationship_table_name)}'";
        $conn->prepare($query);
        $conn->exec();

        if (!$conn->result()) {
            $fk_names = array($model_fk_name, $other_model_fk_name);
            sort($fk_names);
            $unique_key_name = implode('_', $fk_names);

            $query = <<<EOT
CREATE TABLE `{1}` (
    `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY

EOT;

            foreach ($fields as $name => $type) {
                $query .= <<<EOT
    ,`{$name}` {$type}

EOT;
            }

            // Add default fields
            $query .= <<<EOT
    ,`{3}` int(11) NOT NULL
    ,`{4}` int(11) NOT NULL
    ,`created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
    ,`updated_at` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
    , INDEX `{3}` (`{3}`)
    , INDEX `{4}` (`{4}`)
    , UNIQUE KEY `{2}` (`{3}`, `{4}`)
    , INDEX `created_at` (`created_at`)
    , INDEX `updated_at` (`updated_at`)

EOT;
            $query .= ');';
            $conn->prepare($query, $relationship_table_name, $unique_key_name, $model_fk_name, $other_model_fk_name);
            $conn->exec();

            $conn->prepare(
                <<<EOT
ALTER TABLE `{1}` ADD FOREIGN KEY (`{2}`) REFERENCES `{3}`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE `{1}` ADD FOREIGN KEY (`{4}`) REFERENCES `{5}`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;
EOT
                ,
                $relationship_table_name,
                $model_fk_name,
                $model_table,
                $other_model_fk_name,
                $other_model_table
            );
            $conn->exec_multiline();
        } else {
            // TODO: update
        }

        Db::close_connection($conn);
    }

    protected function create_model($tablename, $fields)
    {
        $conn = Db::get_connection();

        $query = "SHOW TABLES LIKE '{$conn->escape($tablename)}'";
        $conn->prepare($query);
        $conn->exec();

        if (!$conn->result()) {
            $query = <<<EOT
CREATE TABLE `{1}` (
    `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY

EOT;

            foreach ($fields as $name => $type) {
                $query .= <<<EOT
    ,`{$name}` {$type}

EOT;
            }

            // Add default fields
            $query .= <<<EOT
    ,`created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
    ,`updated_at` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP
    , INDEX `created_at` (`created_at`)
    , INDEX `updated_at` (`updated_at`)

EOT;
            $query .= ');';

            $conn->prepare($query, $conn->escape($tablename));
            $conn->exec();
        } else {
            // TODO: update
        }

        Db::close_connection($conn);
    }

    protected function create_view($basedir, $controller, $action)
    {
        $dir = sprintf('%s/views/%s', $basedir, $controller);

        print "\tcreating views/$controller/$action.php\n";

        $this->create_dir($dir);
        file_put_contents(sprintf('%s/%s.php', $dir, $action), '<!-- TODO: add your code here -->');
    }

    protected function create_dir(string $dir)
    {
        if (!(file_exists($dir) && is_dir($dir))) {
            return mkdir($dir, 0755, true);
        }
        return false;
    }

    protected function create_or_update_controller(string $basedir, string $controller, array $actions = array())
    {
        $dir = $basedir . '/controllers';

        $controller_class = table_name_to_class_name("{$controller}_controller");

        $controller_file_path = sprintf('%s/%s_controller.php', $dir, $controller);

        if (file_exists($controller_file_path)) {
            require $controller_file_path;
            $rc = new ReflectionClass($controller_class);

            foreach ($actions as $action) {
                if ($rc->hasMethod($action)) {
                    throw new Exception(sprintf('Method %s::%s exists already', $controller_class, $action));
                }
            }

            print "\tupdating controllers/{$controller}_controller.php\n";

            $controller_code = file_get_contents($controller_file_path);
            $insertion_point = strrpos($controller_code, '}');

            $updated_code = substr($controller_code, 0, $insertion_point);

            for ($i = 0; $i < count($actions); $i += 1) {
                $action = strtolower($actions[$i]);

                if ($action === 'index') {
                    continue;
                }

                $this->create_view($basedir, $controller, $action);

                $updated_code .= <<<EOT

    /**
     * @fn {$action}
     * @short Edit this actions's short description
     * @details Edit this actions's detailed description
     */
    public function {$action}()
    {
        // TODO: add your code here
    }

EOT;
            }
            $updated_code .= substr($controller_code, $insertion_point);

            file_put_contents($controller_file_path, $updated_code);
        } else {
            print "\tcreating controllers/{$controller}_controller.php\n";

            $controller_code = <<<EOT
<?php
/**
 * @format
 */

use Emeraldion\EmeRails\Controllers\BaseController;

/**
 * @class {$controller_class}
 * @short Edit this controller's short description
 * @details Edit this controller's detailed description
 */
class {$controller_class} extends BaseController
{
    /**
     * @fn init
     * @short Performs specialized initialization
     * @details You should use this method to do your custom initialization.
     */
    protected function init()
    {
        parent::init();

        // TODO: add your initialization code here
    }

    /**
     * @fn index
     * @short This is the default action
     * @details This is the default action when the controller is invoked without an action
     */
    public function index()
    {
        // TODO: add your code here
    }

EOT;
            $this->create_view($basedir, $controller, 'index');

            for ($i = 0; $i < count($actions); $i += 1) {
                $action = strtolower($actions[$i]);

                if ($action === 'index') {
                    continue;
                }

                $this->create_view($basedir, $controller, $action);

                $controller_code .= <<<EOT

    /**
     * @fn {$action}
     * @short Edit this actions's short description
     * @details Edit this actions's detailed description
     */
    public function {$action}()
    {
        // TODO: add your code here
    }

EOT;
            }
            $controller_code .= <<<EOT
}

?>

EOT;

            $this->create_dir($dir);
            file_put_contents($controller_file_path, $controller_code);
        }
    }
}

$cli = new EmerailsGenerate();
$cli->run();


?>
