#!/usr/bin/env php
<?php
/**
 *                                   _ __
 *   ___  ____ ___  ___  _________ _(_) /____
 *  / _ \/ __ `__ \/ _ \/ ___/ __ `/ / / ___/
 * /  __/ / / / / /  __/ /  / /_/ / / (__  )
 * \___/_/ /_/ /_/\___/_/   \__,_/_/_/____/
 *
 * (c) Claudio Procida 2008-2024
 *
 * @format
 */

require_once __DIR__ . '/base.php';

use splitbrain\phpcli\Options;

use Emeraldion\EmeRails\Helpers\ANSIColorWriter;

class EmerailsLocalize extends ScriptCommand
{
    protected $name = 'EmeRails Localization Utility';
    protected $version = 'v1.0';

    const DEFAULT_BASE_DIR = '/../../assets/strings';
    const STRINGS_FILE_EXTENSION = '.strings';

    const COMMAND_CHECK = 'check';
    const COMMAND_CREATE = 'create';
    const COMMAND_EXTRACT = 'extract';
    const COMMAND_FORMAT = 'format';

    const OPTION_BASE_DIR = 'base-dir';
    const OPTION_CONTROLLER = 'controller';
    const OPTION_DRY_RUN = 'dry-run';
    // TODO:
    // const OPTION_FIX = 'fix';
    const OPTION_GLOBAL = 'global';
    const OPTION_LANGUAGES = 'languages';
    const OPTION_PURGE = 'purge';
    const OPTION_RECURSIVE = 'recursive';
    const OPTION_SKIP_EMPTY = 'skip-empty';
    const OPTION_STRIP_INLINED = 'strip-inlined';
    const OPTION_STRICT = 'strict';
    const OPTION_TRAITS = 'traits';
    const OPTION_VERBOSE = 'verbose';

    const DEFAULT_LANGUAGE = 'en';

    private $thesaurus = [];

    protected function setup(Options $options)
    {
        $options->setHelp('EmeRails script to manage localization resources');

        // General options
        $options->registerOption(self::OPTION_DRY_RUN, 'Do not save anything');
        $options->registerOption(self::OPTION_VERBOSE, 'Print additional information', 'v');
        $options->registerOption(self::OPTION_BASE_DIR, 'Base directory of strings files', 'd', 'base-dir');

        // Check command
        $options->registerCommand(self::COMMAND_CHECK, 'Check localizations');
        // Check options
        $options->registerOption(
            self::OPTION_RECURSIVE,
            'Recursively descend into subdirectories',
            'r',
            false,
            self::COMMAND_CHECK
        );
        $options->registerOption(self::OPTION_STRICT, 'Fail in presence of warnings', null, false, self::COMMAND_CHECK);
        // TODO:
        // $options->registerOption(self::OPTION_FIX, 'Fixes recoverable issues', null, false, self::COMMAND_CHECK);

        // Extract command
        $options->registerCommand(self::COMMAND_EXTRACT, 'Extract localization keys from source');
        // Extract options
        $options->registerOption(
            self::OPTION_CONTROLLER,
            'Extract localization keys for this controller',
            'c',
            'controller',
            self::COMMAND_EXTRACT
        );
        $options->registerOption(
            self::OPTION_LANGUAGES,
            'Comma-separated list of languages for localizations',
            'l',
            'languages',
            self::COMMAND_EXTRACT
        );
        // $options->registerOption(self::OPTION_PURGE, 'Purges unused strings', 'P', false, self::COMMAND_EXTRACT);
        $options->registerOption(
            self::OPTION_TRAITS,
            'Extract from controller traits',
            't',
            false,
            self::COMMAND_EXTRACT
        );
        $options->registerOption(
            self::OPTION_SKIP_EMPTY,
            'Skips writing empty localization files',
            'E',
            false,
            self::COMMAND_EXTRACT
        );
        $options->registerOption(
            self::OPTION_STRIP_INLINED,
            'Strips inlined strings from sources',
            'S',
            false,
            self::COMMAND_EXTRACT
        );

        // Format command
        $options->registerCommand(self::COMMAND_FORMAT, 'Formats localization files');
        // Format options
        $options->registerOption(
            self::OPTION_RECURSIVE,
            'Recursively descend into subdirectories',
            'r',
            false,
            self::COMMAND_FORMAT
        );

        // Create command
        $options->registerCommand(self::COMMAND_CREATE, 'Create localizations');
        // Create options
        $options->registerOption(
            self::OPTION_GLOBAL,
            sprintf(
                'Create global localizations. When provided, the %s option will be ignored.',
                ANSIColorWriter::colorize(sprintf('--%s', self::OPTION_CONTROLLER), 'cyan')
            ),
            'g',
            false,
            self::COMMAND_CREATE
        );
        $options->registerOption(
            self::OPTION_CONTROLLER,
            'Create localizations for a controller',
            'c',
            'controller',
            self::COMMAND_CREATE
        );
        $options->registerOption(
            self::OPTION_LANGUAGES,
            'Comma-separated list of languages for localizations',
            'l',
            'languages',
            self::COMMAND_CREATE
        );
    }

    protected function check(Options $options)
    {
        $dry_run = $options->getOpt(self::OPTION_DRY_RUN);
        $verbose = $options->getOpt(self::OPTION_VERBOSE);
        // This path is relative to the Composer bin directory if available
        $base_dir =
            $options->getOpt(self::OPTION_BASE_DIR) ?:
            ($GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin') . self::DEFAULT_BASE_DIR;

        unset($this->thesaurus);

        if (!(file_exists($base_dir) && is_dir($base_dir))) {
            printf("No such directory: %s.\n", $base_dir);
            ANSIColorWriter::printf("\n%s\n", 'green', ANSIColorWriter::bold('Done'));
            exit(0);
        }

        if (
            $this->check_dir($base_dir, $options->getOpt(self::OPTION_RECURSIVE), $options->getOpt(self::OPTION_STRICT))
        ) {
            print "All strings files correctly formed.\n";
            ANSIColorWriter::printf("\n%s\n", 'green', ANSIColorWriter::bold('Done'));
        } else {
            ANSIColorWriter::printf("\n%s\n", 'red', ANSIColorWriter::bold('Failure'));
            exit(1);
        }
    }

    protected function create(Options $options)
    {
        $dry_run = $options->getOpt(self::OPTION_DRY_RUN);
        $verbose = $options->getOpt(self::OPTION_VERBOSE);
        $languages = $options->getOpt(self::OPTION_LANGUAGES) ?: self::DEFAULT_LANGUAGE;

        // This path is relative to the Composer bin directory if available
        $base_dir =
            $options->getOpt(self::OPTION_BASE_DIR) ?:
            ($GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin') . self::DEFAULT_BASE_DIR;

        if ($options->getOpt(self::OPTION_GLOBAL)) {
            $dir = $base_dir;
        } else {
            $controller = $options->getOpt(self::OPTION_CONTROLLER);
            $dir = $base_dir . '/' . $controller;
        }
        echo "\tcreating localizations under $dir\n";

        $template = <<<EOT
        array(
            // Add your keys below:
            // 'key-of-your-string' => 'This is the user visible text',
        );

        EOT;

        if (!(file_exists($dir) && is_dir($dir))) {
            if (!mkdir($dir, 0755, true)) {
                exit(1);
            }
        }
        foreach (explode(',', $languages) as $language) {
            file_put_contents(sprintf('%s/localizable-%s.strings', $dir, $language), $template);
        }
    }

    protected function format_dir($dir, $write = false, $recursive = false)
    {
        $success = true;

        if (!(file_exists($dir) && is_dir($dir))) {
            return false;
        }
        $handle = opendir($dir);
        if ($handle) {
            while (($filename = readdir($handle)) !== false) {
                if ($filename === '.' || $filename === '..') {
                    continue;
                }
                $path = $dir . '/' . $filename;
                if ($recursive && is_dir($path)) {
                    $success = $success && $this->format_dir($path, $write, $recursive);
                }
                if (str_ends_with($filename, self::STRINGS_FILE_EXTENSION)) {
                    $success = $success && $this->format_file($dir, $filename, $write);
                }
            }
        }

        return $success;
    }

    protected function format(Options $options)
    {
        $dry_run = $options->getOpt(self::OPTION_DRY_RUN);
        $verbose = $options->getOpt(self::OPTION_VERBOSE);
        // This path is relative to the Composer bin directory if available
        $base_dir =
            $options->getOpt(self::OPTION_BASE_DIR) ?:
            ($GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin') . self::DEFAULT_BASE_DIR;

        if (!(file_exists($base_dir) && is_dir($base_dir))) {
            printf("No such directory: %s.\n", $base_dir);
            ANSIColorWriter::printf("\n%s\n", 'green', ANSIColorWriter::bold('Done'));
            exit(0);
        }

        if ($this->format_dir($base_dir, !$dry_run, $options->getOpt(self::OPTION_RECURSIVE))) {
            print "All strings files correctly formatted.\n";
            ANSIColorWriter::printf("\n%s\n", 'green', ANSIColorWriter::bold('Done'));
        } else {
            ANSIColorWriter::printf("\n%s\n", 'red', ANSIColorWriter::bold('Failure'));
            exit(1);
        }
    }

    /**
     * @fn export_strings($str)
     * @short Slightly better var_export for strings with control on quotes and escape sequences
     */
    protected function export_string($str)
    {
        $has_newlines = strpos($str, "\n") !== false;
        $has_quotes = strpos($str, "'") !== false;

        $ret = addcslashes(var_export($str, true), "\n");

        if ($has_newlines || $has_quotes) {
            $ret = '"' . substr($ret, 1, strlen($ret) - 2) . '"';
            if ($has_quotes) {
                $ret = str_replace("\\'", "'", $ret);
            }
        }

        return $ret;
    }

    protected function extract_keys_from_file($filename, $strip_inlined = false)
    {
        $handle = fopen($filename, 'r');
        $contents = $original_contents = fread($handle, filesize($filename));
        fclose($handle);

        preg_match_all(
            "/\bl\(\s*'([^']+)'(,\s*'([^']+)')?\s*\)/",
            $contents,
            $matches,
            PREG_SET_ORDER | PREG_UNMATCHED_AS_NULL
        );

        $extracted_keys = [];
        foreach ($matches as $match) {
            [$localized_string, $key] = $match;
            $default_value = array_key_exists(3, $match) ? $match[3] : null;
            $extracted_keys[$key] = $default_value ?? $key;
            if ($default_value && $strip_inlined) {
                $replace = "l('" . $key . "')";
                // printf("Replacing: '%s'\nWith: '%s'\n", $localized_string, $replace);
                $contents = str_replace($localized_string, $replace, $contents);
            }
        }
        if ($extracted_keys) {
            ksort($extracted_keys);
        }

        if ($strip_inlined && $contents != $original_contents) {
            $handle = fopen($filename, 'w');
            fwrite($handle, $contents);
        }

        return $extracted_keys;
    }

    protected function extract(Options $options)
    {
        $dry_run = $options->getOpt(self::OPTION_DRY_RUN);
        $verbose = $options->getOpt(self::OPTION_VERBOSE);
        $controller = $options->getOpt(self::OPTION_CONTROLLER);
        $extract_from_traits = $options->getOpt(self::OPTION_TRAITS);
        $strip_inlined = $options->getOpt(self::OPTION_STRIP_INLINED);
        $languages = $options->getOpt(self::OPTION_LANGUAGES) ?: self::DEFAULT_LANGUAGE;

        $base_dir =
            $options->getOpt(self::OPTION_BASE_DIR) ?: $GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin';

        $success = true;

        $controllers_dir = sprintf('%s/../../controllers', $base_dir);
        if (!(file_exists($controllers_dir) && is_dir($controllers_dir))) {
            printf(
                "[%s] Unable to locate controllers directory: %s\n",
                ANSIColorWriter::colorize('Error', 'red'),
                $controllers_dir
            );
            exit(1);
        }

        // 1. Extract strings from controller file
        // TODO: this is not sufficient to extract all strings from controllers spread across various traits
        $controller_filename = sprintf('%s/%s_controller.php', $controllers_dir, $controller);
        $extracted_keys = $this->extract_keys_from_file($controller_filename, $strip_inlined);

        // 2. Extract strings from controller traits
        // TODO: this is not sufficient to extract all strings from controllers spread across various traits
        if ($extract_from_traits) {
            $handle = opendir($controllers_dir);
            if ($handle) {
                while (($filename = readdir($handle)) !== false) {
                    if ($filename === '.' || $filename === '..') {
                        continue;
                    }
                    if (stripos($filename, sprintf('%s_controller_', $controller)) !== 0) {
                        continue;
                    }
                    $trait_filename = $controllers_dir . '/' . $filename;
                    $extracted_keys = array_merge(
                        $extracted_keys,
                        $this->extract_keys_from_file($trait_filename, $strip_inlined)
                    );
                }
            }
        }

        // 3. Extract strings from controller views
        $controller_views_dir = sprintf('%s/../../views/%s', $base_dir, $controller);
        if (file_exists($controller_views_dir) && is_dir($controller_views_dir)) {
            $handle = opendir($controller_views_dir);
            if ($handle) {
                while (($filename = readdir($handle)) !== false) {
                    if ($filename === '.' || $filename === '..') {
                        continue;
                    }
                    $view_filename = $controller_views_dir . '/' . $filename;

                    $extracted_keys = array_merge(
                        $extracted_keys,
                        $this->extract_keys_from_file($view_filename, $strip_inlined)
                    );
                }
            }
        }

        foreach (explode(',', $languages) as $language) {
            // 4. Read in existing strings if available
            $controller_path = sprintf(
                $base_dir . self::DEFAULT_BASE_DIR . '/%s/localizable-%s.strings',
                $controller,
                $language
            );
            if (file_exists($controller_path)) {
                $handle = fopen($controller_path, 'r');
                $contents = fread($handle, filesize($controller_path));
                fclose($handle);

                [$strings, $success] = $this->evaluate_strings_callback($contents);
            } else {
                $strings = [];
            }

            // 5. Load global strings, unset duplicate keys, and emit a warning
            $global_path = sprintf($base_dir . self::DEFAULT_BASE_DIR . '/localizable-%s.strings', $language);
            if (file_exists($global_path)) {
                $handle = fopen($global_path, 'r');
                $contents = fread($handle, filesize($global_path));
                fclose($handle);

                [$global_strings, $success] = $this->evaluate_strings_callback($contents);
            } else {
                $global_strings = [];
            }

            // 6. Layer existing strings on top of extracted strings
            $combined_strings = [];
            foreach ($extracted_keys as $key => $inlined_value) {
                if (array_key_exists($key, $global_strings)) {
                    // TODO: warn if verbose
                    continue;
                }
                $combined_strings[$key] = $inlined_value;
            }
            foreach ($strings as $key => $value) {
                $combined_strings[$key] = $value ?? $key;
            }
            ksort($combined_strings);

            if ($dry_run) {
                print "Extracted strings:\n";
                var_dump($combined_strings);
            } else {
                $dir = sprintf('%s/../../assets/strings/%s', $base_dir, $controller);
                if (!(file_exists($dir) && is_dir($dir))) {
                    if (!mkdir($dir, 0755, true)) {
                        exit(1);
                    }
                }

                // TODO: should we rename the old file as .bak ?
                $this->write_sorted_strings(
                    $combined_strings,
                    $controller_path,
                    !$dry_run,
                    $options->getOpt(self::OPTION_SKIP_EMPTY)
                );
            }
        }

        if ($success) {
            print "Strings successfully extracted.\n";
            // TODO: break down by language and controller
            ANSIColorWriter::printf("\n%s\n", 'green', ANSIColorWriter::bold('Done'));
        } else {
            ANSIColorWriter::printf("\n%s\n", 'red', ANSIColorWriter::bold('Failure'));
            exit(1);
        }
    }

    protected function write_sorted_strings($strings = [], $path, $write = false, $skip_empty = false)
    {
        if (!$strings && $skip_empty) {
            // Nothing to do here
            return;
        }

        $keys = array_keys($strings);
        sort($keys);

        $sorted_strings = '';
        $last_prefix = null;
        foreach ($keys as $key) {
            $key_prefix = $this->get_key_prefix($key);
            if (!is_null($last_prefix) && $key_prefix != $last_prefix) {
                $sorted_strings .= "\n";
            }
            $sorted_strings .= sprintf("    %s => %s,\n", var_export($key, true), $this->export_string($strings[$key]));
            $last_prefix = $key_prefix;
        }

        if ($write) {
            $template = <<<EOT
            array(
            %s);

            EOT;

            file_put_contents($path, sprintf($template, $sorted_strings));
        }
    }

    protected function main(Options $options)
    {
        switch ($options->getCmd()) {
            case self::COMMAND_CHECK:
                $this->check($options);
                break;
            case self::COMMAND_CREATE:
                $this->create($options);
                break;
            case self::COMMAND_EXTRACT:
                $this->extract($options);
                break;
            case self::COMMAND_FORMAT:
                $this->format($options);
                break;
            default:
                $options->useCompactHelp();
                print $options->help();
        }
    }

    protected function check_dir($dir, $recursive = false, $strict = false)
    {
        $success = true;

        if (!(file_exists($dir) && is_dir($dir))) {
            return false;
        }
        $handle = opendir($dir);
        if ($handle) {
            while (($filename = readdir($handle)) !== false) {
                if ($filename === '.' || $filename === '..') {
                    continue;
                }
                $path = $dir . '/' . $filename;
                if ($recursive && is_dir($path)) {
                    $success = $success && $this->check_dir($path, $recursive, $strict);
                }
                if (str_ends_with($filename, self::STRINGS_FILE_EXTENSION)) {
                    $success = $success && $this->check_file($dir, $filename);
                }
            }
        }

        $dir = $this->get_string_file($dir);
        if (isset($this->thesaurus[$dir])) {
            foreach ($this->thesaurus[$dir] as $language => $strings) {
                if ($language == self::DEFAULT_LANGUAGE) {
                    continue;
                }
                $common_strings = array_intersect_key(
                    $this->thesaurus[$dir][self::DEFAULT_LANGUAGE] ?? [],
                    $this->thesaurus[$dir][$language] ?? []
                );
                if (count($strings) > count($common_strings)) {
                    $success = !$strict;
                    foreach (
                        array_diff_key(
                            $this->thesaurus[$dir][$language] ?? [],
                            $this->thesaurus[$dir][self::DEFAULT_LANGUAGE] ?? []
                        )
                        as $key => $value
                    ) {
                        ANSIColorWriter::printf("Warning: missing key in strings file\n", 'yellow');
                        ANSIColorWriter::printf("------------------------------------\n", 'bright-black');
                        ANSIColorWriter::printf(
                            "Language: %s\n",
                            'bright-black',
                            ANSIColorWriter::colorize(self::DEFAULT_LANGUAGE, 'white')
                        );
                        ANSIColorWriter::printf(
                            "    File: %s\n",
                            'bright-black',
                            ANSIColorWriter::colorize(
                                sprintf('%s/localizable-%s.strings', $dir, self::DEFAULT_LANGUAGE),
                                'white'
                            )
                        );
                        ANSIColorWriter::printf(
                            "     Key: %s\n\n",
                            'bright-black',
                            ANSIColorWriter::colorize($key, 'white')
                        );
                    }
                } elseif (count($this->thesaurus[$dir][self::DEFAULT_LANGUAGE]) > count($common_strings)) {
                    $success = !$strict;
                    foreach (
                        array_diff_key(
                            $this->thesaurus[$dir][self::DEFAULT_LANGUAGE],
                            $this->thesaurus[$dir][$language]
                        )
                        as $key => $value
                    ) {
                        ANSIColorWriter::printf("Warning: missing key in strings file\n", 'yellow');
                        ANSIColorWriter::printf("------------------------------------\n", 'bright-black');
                        ANSIColorWriter::printf(
                            "Language: %s\n",
                            'bright-black',
                            ANSIColorWriter::colorize($language, 'white')
                        );
                        ANSIColorWriter::printf(
                            "    File: %s\n",
                            'bright-black',
                            ANSIColorWriter::colorize(sprintf('%s/localizable-%s.strings', $dir, $language), 'white')
                        );
                        ANSIColorWriter::printf(
                            "     Key: %s\n\n",
                            'bright-black',
                            ANSIColorWriter::colorize($key, 'white')
                        );
                    }
                }
            }
        }

        return $success;
    }

    protected function get_key_prefix(string $key)
    {
        $prefix = implode('-', array_slice(explode('-', $key), 0, 2));
        return $prefix;
    }

    protected function format_file($dir, $filename, $write = false)
    {
        $success = true;

        $path = $dir . '/' . $filename;

        $handle = fopen($path, 'r');
        $contents = fread($handle, filesize($path));
        fclose($handle);

        [$strings, $success] = $this->evaluate_strings_callback($contents, function ($strings) use ($path, $write) {
            $this->write_sorted_strings($strings, $path, $write);
        });

        return $success;
    }

    protected function check_file($dir, $filename)
    {
        $success = true;

        $path = $dir . '/' . $filename;

        $handle = fopen($path, 'r');
        $contents = fread($handle, filesize($path));
        fclose($handle);

        preg_match('/-([a-z]{2})\.strings$/', $filename, $matches);
        [, $language] = $matches;

        [$strings, $success] = $this->evaluate_strings_callback($contents, function ($strings) use ($dir, $language) {
            foreach ($strings as $key => $value) {
                $this->set_string($dir, $language, $key, $value);
            }
        });

        return $success;
    }

    protected function evaluate_strings_callback($contents, $callback_fn = null)
    {
        $success = true;
        $strings = null;
        try {
            eval("\$strings = $contents;");

            if (is_callable($callback_fn)) {
                $callback_fn($strings);
            }
        } catch (Throwable $t) {
            $success = false;
            printf(
                "[%s] Malformed strings file: %s\n\t%s\n\n",
                ANSIColorWriter::colorize('Error', 'red'),
                $path,
                $t->getMessage()
            );
            $lines = explode("\n", $contents);
            foreach (range($t->getLine() - 2, $t->getLine() + 2) as $i) {
                if ($i === $t->getLine()) {
                    ANSIColorWriter::printf("%4d | %s\n", 'red', $i, $lines[$i - 1]);
                } else {
                    printf("%4d | %s\n", $i, $lines[$i - 1]);
                }
            }
            printf("\n");
        } finally {
            return [$strings, $success];
        }
    }

    protected function set_string($dir, $language, $key, $value)
    {
        $dir = $this->get_string_file($dir);
        if (!isset($this->thesaurus[$dir])) {
            $this->thesaurus[$dir] = [];
        }
        if (!isset($this->thesaurus[$dir][$language])) {
            $this->thesaurus[$dir][$language] = [];
        }
        $this->thesaurus[$dir][$language][$key] = $value;
    }

    protected function get_string_file($dir)
    {
        // This path is relative to the Composer bin directory if available
        $base_dir = ($GLOBALS['_composer_bin_dir'] ?? __DIR__ . '/../vendor/bin') . self::DEFAULT_BASE_DIR;
        if (strpos($dir, $base_dir) === 0) {
            $dir = substr($dir, strlen($base_dir) + 1) ?: '';
        }
        return $dir;
    }
}

$cli = new EmerailsLocalize();
$cli->run();


?>
